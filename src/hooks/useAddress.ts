import { useState, useEffect } from "react";

export interface Address {
  cep: string;
  logradouro: string;
  complemento: string;
  bairro: string;
  localidade: string;
  uf: string;
  ibge: string;
  gia: string;
  ddd: string;
  siafi: string;
}

export function useAddress() {
  const [cep, setCep] = useState<string>("");
  const [address, setAddress] = useState<Address | null>(null);
  const [error, setError] = useState<string | null>(null);
  const [savedAddresses, setSavedAddresses] = useState<Address[]>([]);

  useEffect(() => {
    const storedAddresses = localStorage.getItem("savedAddresses");
    if (storedAddresses) {
      setSavedAddresses(JSON.parse(storedAddresses));
    }
  }, []);

  // OBSERVATION: this function has been generated by ChatGPT to validate the CEP
  const handleCepChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    // Remove non-numeric characters
    let value = e.target.value.replace(/\D/g, "");
    // Limit to 8 digits
    if (value.length > 8) value = value.slice(0, 8);
    // Format with hyphens
    if (value.length > 5) value = `${value.slice(0, 5)}-${value.slice(5)}`;
    setCep(value);
  };

  const fetchAddress = async () => {
    setError(null);
    setAddress(null);

    const numericCep = cep.replace(/\D/g, "");

    if (numericCep.length !== 8) {
      setError("CEP inválido. Digite um CEP com 8 dígitos.");
      return;
    }

    const existingAddress = savedAddresses.find((addr) => addr.cep === cep);
    if (existingAddress) {
      setAddress(existingAddress);
      return;
    }

    try {
      const response = await fetch(`https://viacep.com.br/ws/${numericCep}/json/`);
      const data: Address & { erro?: boolean } = await response.json();

      if (data.erro) {
        setError("CEP não encontrado.");
        return;
      }

      setAddress({ ...data });
    } catch {
      setError("Erro ao buscar o CEP.");
    }
  };

  const saveAddress = () => {
    if (!address) return;

    if (savedAddresses.some((addr) => addr.cep === address.cep)) {
      setError("Este endereço já foi salvo.");
      return;
    }

    const updatedAddresses = [...savedAddresses, address];
    setSavedAddresses(updatedAddresses);
    localStorage.setItem("savedAddresses", JSON.stringify(updatedAddresses));
  };

  const removeAddress = (cepToRemove: string) => {
    const updatedAddresses = savedAddresses.filter((addr) => addr.cep !== cepToRemove);
    setSavedAddresses(updatedAddresses);
    localStorage.setItem("savedAddresses", JSON.stringify(updatedAddresses));
  };

  return { cep, handleCepChange, address, error, fetchAddress, saveAddress, removeAddress, savedAddresses };
}
